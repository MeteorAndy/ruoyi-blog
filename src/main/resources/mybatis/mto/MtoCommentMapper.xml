<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.project.emmanuel.mto.mapper.MtoCommentMapper">

    <resultMap type="MtoComment" id="MtoCommentResult">
        <result property="id"    column="id"    />
        <result property="pId"    column="p_id"    />
        <result property="ancestors"    column="ancestors"    />
        <result property="postId"    column="post_id"    />
        <result property="email"    column="email"    />
        <result property="nickName"    column="nick_name"    />
        <result property="content"    column="content"    />
        <result property="avatar"    column="avatar"    />
        <result property="love"    column="love"    />
        <result property="status"    column="status"    />
        <result property="createTime"    column="create_time"    />
        <result property="examineBy"    column="examine_by"    />
        <result property="examineTime"    column="examine_time"    />
        <result property="ip"    column="ip"    />
        <result property="parentNickName"    column="parent_nick_name"    />
    </resultMap>

    <sql id="selectMtoCommentVo">
        select id, p_id, ancestors, post_id, email, nick_name, content, avatar, love, status, create_time, examine_by, examine_time, inet_ntoa(ip), parent_nick_name from mto_comment
    </sql>

    <select id="selectMtoCommentList" parameterType="MtoComment" resultMap="MtoCommentResult">
        select
            c.id,
            c.p_id,
            c.post_id,
            c.email,
            c.nick_name,
            c.content,
            (select content from mto_comment xxx where  xxx.id = c.p_id) as parentContent,
            c.avatar,
            c.love,
            c.status,
            c.create_time,
            c.examine_by,
            c.examine_time,
            inet_ntoa(c.ip) as "ip",
            c.parent_nick_name,
            if(post_id = 0,'留言板',p.title) as "title"
        from mto_comment c left join mto_post p on c.post_id = p.id
        <where>
            <if test="email != null  and email != ''"> and c.email  like concat('%',#{email}, '%')</if>
            <if test="nickName != null  and nickName != ''"> and c.nick_name like concat('%', #{nickName}, '%')</if>
            <if test="status != null  and status != ''"> and c.status = #{status}</if>
            <if test="examineBy != null  and examineBy != ''"> and c.examine_by = #{examineBy}</if>
            <if test="examineTime != null "> and c.examine_time = #{examineTime}</if>
            <if test="ip != null  and ip != ''"> and c.ip = #{ip}</if>
        </where>
        order by c.create_time desc
    </select>

    <delete id="deleteMtoCommentById" parameterType="Long">
        delete from mto_comment where id = #{id}
    </delete>

    <delete id="deleteMtoCommentByIds" parameterType="String">
        delete from mto_comment where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <update id="examineMtoCommentByIds" parameterType="String">
        update mto_comment set status = 1 ,examine_by=#{loginName,jdbcType=VARCHAR},examine_time=#{nowDate} where id in
        <foreach item="id" collection="ids" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <delete id="deleteMtoCommentRecursion" parameterType="String">
        delete
        mto_c
from mto_comment mto_c
         right join (select T3.id
                     FROM (SELECT @codes                            as _ids,
                                  (SELECT @codes := GROUP_CONCAT(id)
                                   FROM mto_comment
                                   WHERE FIND_IN_SET(p_id, @codes)) as T1,
                                  @l := @l + 1                      as level_
                           FROM mto_comment,
                                (SELECT @codes := #{id}, @l := 0) T4
                           WHERE @codes IS NOT NULL) T2,
                          mto_comment T3
                     WHERE FIND_IN_SET(T3.id, T2._ids)) mto_l on mto_l.id = mto_c.id
    </delete>
</mapper>